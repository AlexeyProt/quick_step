"use strict";
function ProductData(editor, url) {
	this._editor = editor;
	this._url = url;
	this._commandRun = true;
	this._nonEditablesInit = [];	
	this._nonEditables = [];
	this._allowedCommands = [ 'Bold', 'Italic', 'Underline', 'Superscript', 'Subscript' ];
	
	this.start();
} 

ProductData.prototype._action = function () {
	this._openDialog();
};

ProductData.prototype._openDialog = function () {	
	return this._editor.windowManager.openUrl({
		title: 'URL Dialog Demo',
		url: document.location.origin + '/admin/dialog/products'
	});		
};

ProductData.prototype._formatHandlerOld = function (e) {
	console.log(e);
	console.log(this._editor);
	if ( e.command != 'Bold' ) return;
		
	if (!this._commandRun) {
		this._commandRun = true;
		this._editor.execCommand('Bold');
		return;
	}
		
	console.log(this._editor.queryCommandState('Bold'));
	var initialCommandState = this._editor.queryCommandState('Bold');
	

	var nonEditables = this._editor.dom.select('[contenteditable="false"]');
	if (nonEditables.length > 0) {

		for ( var i = 0; i < nonEditables.length; i++ ) {
			nonEditables[i].contentEditable = true;
		}	
		this._commandRun = false;
		this._editor.execCommand('mceToggleFormat', true, 'bold');
		
			
		for ( var i = 0; i < nonEditables.length; i++ ) {
			nonEditables[i].contentEditable = false;
		}
		return;
	}

	
		
	console.log(nonEditables);
		
	/*
	var elem = this._editor.selection.getNode();
	if ( elem.contentEditable == 'false' ) {
		elem.contentEditable = true;
		this._editor.selection.select(elem.firstElementChild);
		this._editor.execCommand('Bold');
		elem.contentEditable = false;
		console.log(elem);
		return;
	}

	console.log(elem);
	var elems = elem.querySelectorAll('[contenteditable="false"]');
	if (elems.length == 0) return;
	console.log(elems);
	for ( var i = 0; i < elems.length; i++ ) {
		elems[i].contentEditable = true;
	}
	this._editor.execCommand('Bold'); // Удаляется форматирование
	this._editor.execCommand('Bold'); // Восстанавливается форматирование		
	for ( var i = 0; i < elems.length; i++ ) {
		elems[i].contentEditable = false;
	}
	console.log(elem); */	
};

ProductData.prototype._beforeFormatHandler = function (e) {
	console.log(e);
	var selNode = this._editor.selection.getNode();
	console.log(selNode);
	
	this._nonEditables = this._editor.dom.select('span[contenteditable="false"]');
	for ( var i = 0; i < this._nonEditables.length; i++ ) {
		this._nonEditablesInit[i] = this._nonEditables[i].cloneNode(true);
		this._nonEditables[i].contentEditable = true;
	}
};

ProductData.prototype._formatHandler = function (e) {
	console.log(e);
	
	
	for ( var i = 0; i < this._nonEditables.length; i++ ) {
		this._nonEditables[i].contentEditable = false;
		console.log(this._nonEditables[i], this._nonEditablesInit[i]);
		/* if (!this._nonEditables[i].lastElementChild) continue;
		this._nonEditables[i].parentNode.insertBefore( this._nonEditables[i].lastElementChild, this._nonEditables[i] );
		this._nonEditables[i].previousElementSibling.appendChild( this._nonEditables[i] );
		this._nonEditables[i].appendChild( this._nonEditables[i].parentNode.firstChild ); */
		
		if ( this._nonEditables[i].childElementCount === this._nonEditablesInit[i].childElementCount ) {
			if ( !this._nonEditables[i].parentNode ) {
				this._nonEditables = this._editor.dom.select('[contenteditable="true"]');
				i = 0;
				console.log(this._nonEditables);
				continue;
			}
			this._nonEditables[i].parentNode.replaceChild( this._nonEditablesInit[i], this._nonEditables[i] );
			continue;
		}
		console.log('test');
		var innerHTML = this._nonEditables[i].innerHTML;
		this._nonEditables[i].parentNode.insertBefore( this._nonEditables[i].firstElementChild, this._nonEditables[i] );
		this._nonEditables[i].previousElementSibling.innerHTML = '';
		this._nonEditables[i].previousElementSibling.appendChild( this._nonEditablesInit[i] );
		this._nonEditables[i].parentNode.removeChild( this._nonEditables[i] );
	}
	
	
	
	var selNode = this._editor.selection.getNode(),
		nonEditables = selNode.querySelectorAll('span[contenteditable="true"]');
	var innerHTML = '';
	var nodeRF = null;
	console.log(selNode, nonEditables);
	for ( var i = 0; i < nonEditables.length; i++ ) {
		console.log(nonEditables[i].parentNode);
		innerHTML += nonEditables[i].innerHTML;
		if ( nonEditables[i].parentNode === selNode ) {
			nodeRF = nonEditables[i];
			nodeRF.contentEditable = false;
		}
		else {
			nonEditables[i].parentNode.removeChild( nonEditables[i] );
		}
	}
	if (nodeRF) nodeRF.innerHTML = innerHTML;
	console.log(nodeRF, innerHTML);	
	
};

ProductData.prototype.start = function ( editor, url ) {
	this._editor.on('BeforeExecCommand', this._beforeFormatHandler.bind(this)); 
	this._editor.on('ExecCommand', this._formatHandler.bind(this)); 
	
 
	// Adds a menu item to the tools menu
	this._editor.ui.registry.addMenuItem('testplugin', {
		text: 'testplugin plugin',
		onAction: this._action.bind(this)
	});
	this._editor.ui.registry.addButton('testplugin', {
		text: 'testplugin',
		onAction: this._action.bind(this)
	});	

    this._editor.ui.registry.addContextToolbar('testplugin', {
      predicate: function (node) {
		if (node.dataset !== undefined && node.dataset.product === 'true') return true;
      },
      items: 'alignleft aligncenter alignright testplugin',
      position: 'node',
      scope: 'node'
    });		
};








tinymce.PluginManager.add('testplugin', function(editor, url) {
	new ProductData(editor, url);	
});