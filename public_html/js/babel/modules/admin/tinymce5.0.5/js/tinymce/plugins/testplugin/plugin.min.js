"use strict";
function ProductData(editor, url) {
	this._editor = editor;
	this._url = url;
	this._nonEditablesInit = []; // Нередактируемые элементы до форматирования
	this._nonEditables = []; // Нередактируемые элементы после форматирования
	
	this.start();
} 

ProductData.prototype._openDialogProducts = function () {	
	return this._editor.windowManager.openUrl({
		title: 'URL Dialog Demo',
		url: document.location.origin + '/admin/dialog/products'
	});		
};

ProductData.prototype._openDialogProduct = function () {	
	return this._editor.windowManager.openUrl({
		title: 'URL Dialog Demo',
		url: document.location.origin + '/admin/dialog/product/' + this._selNodeId_product
	});		
};
// Обработчик до форматирования
// Добавляет нередактируемые элементы с классом productData в массив this._nonEditables
ProductData.prototype._beforeFormatHandler = function (e) {
	if ( e.command === 'RemoveFormat' ) return;
	this._nonEditables = this._editor.dom.select('.productData');
	for ( var i = 0; i < this._nonEditables.length; i++ ) {
		this._nonEditablesInit[i] = this._nonEditables[i].cloneNode(true);
		this._nonEditables[i].contentEditable = true;
	}
};
// Обработчик после форматирования
// Перемещает нередактируемые элементы внутрь тегов форматирования ( <strong><span class="productData"></span></strong> )
ProductData.prototype._formatHandler = function (e) {
	if ( e.command === 'RemoveFormat' ) return;	
	for ( var i = 0; i < this._nonEditables.length; i++ ) {
		if (!this._nonEditables[i].parentNode) continue;
		if ( this._nonEditables[i].childElementCount === this._nonEditablesInit[i].childElementCount ) {
			this._nonEditables[i].parentNode.replaceChild( this._nonEditablesInit[i], this._nonEditables[i] );
			continue;
		}
		this._nonEditables[i].parentNode.insertBefore( this._nonEditables[i].firstElementChild, this._nonEditables[i] );
		this._nonEditables[i].previousElementSibling.innerHTML = '';
		this._nonEditables[i].previousElementSibling.appendChild( this._nonEditablesInit[i] );
		this._nonEditables[i].parentNode.removeChild( this._nonEditables[i] );
	}
};

ProductData.prototype._predicateCB = function (node) {
	if (node.className === 'productData') {
		var attributes = [ 'productName_productId_product', 'productAlt_name_productId_product', 'productContentId_product', 'pricePriceId_product', 'main_imageName_imageId_product' ];
		for ( var i = 0; i < attributes.length; i++ ) {
			if ( node.dataset[attributes[i]] ) {
				this._selNodeId_product = node.dataset[attributes[i]];
				return true;
			}
		}	
	} 	
}; 

ProductData.prototype.start = function () {
	this._editor.on('BeforeExecCommand', this._beforeFormatHandler.bind(this)); 
	this._editor.on('ExecCommand', this._formatHandler.bind(this)); 
	
 
	// Adds a menu item to the tools menu
	this._editor.ui.registry.addMenuItem('testplugin', {
		text: 'testplugin plugin',
		onAction: this._openDialogProducts.bind(this)
	});
	this._editor.ui.registry.addButton('testplugin', {
		text: 'testplugin',
		onAction: this._openDialogProducts.bind(this)
	});	
	this._editor.ui.registry.addButton('changeInf', {
		text: 'Изменить информацию',
		onAction: this._openDialogProduct.bind(this)
	});		

    this._editor.ui.registry.addContextToolbar('testplugin', {
      predicate: this._predicateCB.bind(this),
      items: 'alignleft aligncenter alignright changeInf',
      position: 'node',
      scope: 'node'
    });		
};








tinymce.PluginManager.add('testplugin', function(editor, url) {
	new ProductData(editor, url);	
});