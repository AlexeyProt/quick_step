










tinymce.PluginManager.add('testplugin', function(editor, url) {

	editor.on('ExecCommand', function (e) {
		console.log(e);
		
		if ( e.command != 'Bold' ) return;
		var elem = editor.selection.getNode();
		if ( elem.contentEditable == 'false' ) {
			elem.contentEditable = true;
			editor.selection.select(elem.firstElementChild);
			editor.execCommand('Bold');
			elem.contentEditable = false;
			console.log(elem);
			return;
		}

		console.log(elem);
		var elems = elem.querySelectorAll('[contenteditable="false"]');
		if (elems.length == 0) return;
		console.log(elems);
		for ( var i = 0; i < elems.length; i++ ) {
			elems[i].contentEditable = true;
		}
		editor.execCommand('Bold'); // Удаляется форматирование
		editor.execCommand('Bold'); // Восстанавливается форматирование		
		for ( var i = 0; i < elems.length; i++ ) {
			elems[i].contentEditable = false;
		}
		console.log(elem);
	});
	
	var openDialog = function () {
		
		
		
		return editor.windowManager.openUrl({
			title: 'URL Dialog Demo',
			url: document.location.origin + '/admin/dialog/products'
		});		
		
	/*	return editor.windowManager.open({		
			title: 'testplugin plugin',
			body: {
					type: 'panel',
					items:[
						{
							type: 'table',
							header: [ 'Heading 1', 'Heading 2', 'Heading 3' ],
							cells: [
								[ 'Cell 1', 'Cell 2', 'Cell 3' ],
								[ 'Cell 4', 'Cell 5', 'Cell 6' ]
							]
						}, 
						{
							type: 'button',
							text: 'Alphavvvvvvvvvvvvvvvvv',
							primary: false,
							name: 'alpha-button'
						},
						{
							type: 'button',
							text: 'Betta',
							primary: false,
							name: 'betta-button'
						},
						{
							type: 'button',
							text: 'Betta2',
							primary: false,
							name: 'betta-button2'
						},
						{
							type: 'input',
							name: 'text',
							label: 'Input Label',
							placeholder: 'example'
						}						
					]					
			},
			buttons: [
				{
					type: 'cancel',
					text: 'Close'					
				},
				{
					type: 'submit',
					text: 'Save',
					primary: true
				}						
			],
  onChange (api, changeData) {
    if (changeData.name === 'text') {
      // Do something with the text to display changes
	  console.log('text');
    }
  },			
			initialData: {
				collect: [{
					text: 'text',
					value: 'v',
					icon: 'T'
				},
				{
					text: 'text2',
					value: 'v2',
					icon: 'T2'			
				}
				]
			},			
			onSubmit: function(api) {
				var data = api.getData();
				var editorTabs = new EditorTabs(editor);					
				editorTabs.setTabsContainer( [ { title: data.title } ] );
			}			
		}); */
	} 
	// Adds a menu item to the tools menu
	editor.ui.registry.addMenuItem('testplugin', {
		text: 'testplugin plugin',
		onAction: function() {
			openDialog();
		}
	});
	editor.ui.registry.addButton('testplugin', {
		text: 'testplugin',
		onAction: function() {
			openDialog();
		}
	});	

    editor.ui.registry.addContextToolbar('testplugin', {
      predicate: function (node) {
		if (node.dataset !== undefined && node.dataset.product === 'true') return true;
      },
      items: 'alignleft aligncenter alignright testplugin',
      position: 'node',
      scope: 'node'
    });	
});